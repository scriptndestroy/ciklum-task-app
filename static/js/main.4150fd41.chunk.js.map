{"version":3,"sources":["components/Form/FormTask.tsx","components/Dialog/DialogTask.tsx","components/Panel/PanelTask.tsx","components/Tasks/Tasks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormTask","forwardRef","props","ref","onSave","task","React","useState","formTask","setFormTask","formik","useFormik","initialValues","title","description","status","validate","data","errors","onSubmit","console","log","isFormFieldValid","name","touched","getFormErrorMessage","className","style","marginTop","id","e","preventDefault","handleSubmit","validateForm","then","r","value","maxLength","onChange","currentTarget","autoFocus","classNames","htmlFor","options","label","DialogTask","open","onClose","formTaskRef","useRef","draggable","dismissableMask","footer","icon","onClick","type","form","header","onHide","position","width","visible","PanelTask","tasks","readOnly","selectedTask","setSelectedTask","openDialog","setOpenDialog","onClickAdd","onEdit","index","Fragment","onAdd","headerTemplate","titleClassName","map","t","i","o","template2","Tasks","setTasks","update","findIndex","length","filter","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4150fd41.chunk.js","sourcesContent":["import { useFormik } from \"formik\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { classNames } from \"primereact/utils\";\r\nimport React, { forwardRef, Ref, SyntheticEvent } from \"react\";\r\nimport \"../../index.css\";\r\nimport { Task } from \"../../interfaces/index\";\r\n\r\nexport interface RefObjectFormTask {\r\n  onSubmit: () => void;\r\n}\r\n\r\ninterface FormTaskProps {\r\n  ref?: ((instance: unknown) => void) | React.MutableRefObject<unknown> | null;\r\n  onSave: (task: Task) => void;\r\n  task?: Task;\r\n}\r\n\r\nconst FormTask = forwardRef(\r\n  (props: FormTaskProps, ref: Ref<RefObjectFormTask>) => {\r\n    const statusOptions: any[] = [\r\n      { label: \"To Do\", value: \"TD\" },\r\n      { label: \"Done\", value: \"D\" },\r\n    ];\r\n    const { onSave, task } = props;\r\n\r\n    const [formTask, setFormTask] = React.useState<Task>(task || ({} as Task));\r\n\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        title: task?.title ? task.title : \"\",\r\n        description: task?.description ? task.description : \"\",\r\n        status: task?.status ? task.status : \"\",\r\n      },\r\n\r\n      validate: (data: Task) => {\r\n        let errors = {\r\n          title: \"\",\r\n          description: \"\",\r\n          status: \"\",\r\n        };\r\n\r\n        if (!data.title) {\r\n          errors.title = \"Title is required.\";\r\n        }\r\n\r\n        if (!data.description) {\r\n          errors.description = \"Description is required.\";\r\n        }\r\n\r\n        if (!data.status) {\r\n          errors.status = \"Status is required.\";\r\n        }\r\n\r\n        return errors;\r\n      },\r\n\r\n      onSubmit: (data) => {\r\n        onSave(data);\r\n        console.log(\"aaa\");\r\n      },\r\n    });\r\n\r\n    const handleSubmit = (e: SyntheticEvent) => {\r\n      e.preventDefault();\r\n      formik.handleSubmit();\r\n      formik.validateForm(formTask).then((r) => {\r\n        if (!r.title && !r.description) {\r\n          onSave(formTask);\r\n        }\r\n      });\r\n      return false;\r\n    };\r\n\r\n    const isFormFieldValid = (name: string) =>\r\n      !!(\r\n        formik.touched[name as keyof Task] && formik.errors[name as keyof Task]\r\n      );\r\n    const getFormErrorMessage = (name: string) => {\r\n      return (\r\n        isFormFieldValid(name) && (\r\n          <small className=\"p-error\">{formik.errors[name as keyof Task]}</small>\r\n        )\r\n      );\r\n    };    \r\n\r\n    return (\r\n      <div className=\"form-demo\" style={{ marginTop: \"2rem\" }}>\r\n        <div className=\"\">\r\n          <form\r\n            id=\"form-task\"\r\n            className=\"p-fluid\"\r\n            onSubmit={(e) => handleSubmit(e)}\r\n          >\r\n            <div className=\"p-field\">\r\n              <span className=\"p-float-label\">\r\n                <InputText\r\n                  id=\"title\"\r\n                  name=\"title\"\r\n                  value={formTask.title}\r\n                  maxLength={100}\r\n                  onChange={(e) =>\r\n                    setFormTask({ ...formTask, title: e.currentTarget.value })\r\n                  }\r\n                  autoFocus\r\n                  className={classNames({\r\n                    \"p-invalid\": isFormFieldValid(\"title\"),\r\n                  })}\r\n                />\r\n                <label\r\n                  htmlFor=\"title\"\r\n                  className={classNames({\r\n                    \"p-error\": isFormFieldValid(\"title\"),\r\n                  })}\r\n                >\r\n                  Title*\r\n                </label>\r\n              </span>\r\n              {getFormErrorMessage(\"title\")}\r\n            </div>\r\n            <div className=\"p-field p-mt-6\">\r\n              <span className=\"p-float-label\">\r\n                <InputText\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  value={formTask.description}\r\n                  maxLength={300}\r\n                  onChange={(e) =>\r\n                    setFormTask({\r\n                      ...formTask,\r\n                      description: e.currentTarget.value,\r\n                    })\r\n                  }\r\n                  className={classNames({\r\n                    \"p-invalid\": isFormFieldValid(\"description\"),\r\n                  })}\r\n                />\r\n                <label\r\n                  htmlFor=\"description\"\r\n                  className={classNames({\r\n                    \"p-error\": isFormFieldValid(\"description\"),\r\n                  })}\r\n                >\r\n                  Description*\r\n                </label>\r\n              </span>\r\n              {getFormErrorMessage(\"description\")}\r\n            </div>\r\n            <div className=\"p-field p-mt-6\">\r\n              <span className=\"p-float-label\">\r\n                <Dropdown\r\n                  id=\"status\"\r\n                  name=\"status\"                  \r\n                  options={statusOptions}\r\n                  value={formTask.status}\r\n                  onChange={(e) =>                  \r\n                    setFormTask({ ...formTask, status: e.value })\r\n                  }\r\n                  className={classNames({\r\n                    \"p-invalid\": isFormFieldValid(\"status\"),\r\n                  })}\r\n                />\r\n                <label\r\n                  htmlFor=\"status\"\r\n                  className={classNames({\r\n                    \"p-error\": isFormFieldValid(\"status\"),\r\n                  })}\r\n                >\r\n                  Status*\r\n                </label>\r\n              </span>\r\n              {getFormErrorMessage(\"status\")}\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FormTask;\r\n","import 'primeflex/primeflex.css';\r\nimport 'primeicons/primeicons.css';\r\nimport { Button } from 'primereact/button';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport 'primereact/resources/primereact.css';\r\nimport React, { useRef } from 'react';\r\nimport '../../index.css';\r\nimport { Task } from '../../interfaces';\r\nimport FormTask, { RefObjectFormTask } from '../Form/FormTask'\r\n// import './DialogDemo.css';\r\n\r\n\r\ninterface DialogTaskProps {\r\n    onSave: (task: Task) => void;\r\n    onClose: () => void;\r\n    open: boolean;\r\n    title: string;\r\n    task?: Task;\r\n}\r\n\r\nconst DialogTask: React.FunctionComponent<DialogTaskProps> = (props: DialogTaskProps) => {\r\n    const { open, title, task, onSave, onClose } = props;\r\n\r\n    const formTaskRef = useRef<RefObjectFormTask>(null);\r\n\r\n    const renderFooter = (name: string) => {\r\n        return (\r\n            <div>\r\n                <Button label=\"No\" icon=\"pi pi-times\" onClick={onClose} className=\"p-button-text\" />\r\n                <Button label=\"Yes\" icon=\"pi pi-check\" type='submit' form='form-task' autoFocus />\r\n            </div>\r\n        );\r\n    }\r\n\r\n \r\n    return (\r\n        <Dialog\r\n            draggable={false}\r\n            dismissableMask\r\n            footer={renderFooter('displayBasic')}\r\n            header={title}            \r\n            onHide={onClose}\r\n            position='top'\r\n            style={{ width: '30rem', marginTop: '5rem' }}\r\n            visible={open}\r\n        >\r\n            <FormTask  ref={formTaskRef} task={task} onSave={(task: Task) => onSave(task)} />\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default DialogTask;","import 'primeflex/primeflex.css';\r\nimport 'primeicons/primeicons.css';\r\nimport { Button } from 'primereact/button';\r\nimport { Panel } from 'primereact/panel';\r\nimport 'primereact/resources/primereact.css';\r\nimport React from 'react';\r\nimport DialogTask from '../Dialog/DialogTask';\r\nimport '../../index.css';\r\nimport { Task } from '../../interfaces';\r\n\r\ninterface PanelTaskProps {\r\n    tasks: Task[];\r\n    title?: string;\r\n    onChange: (t: Task) => void;\r\n    readOnly?: boolean;\r\n}\r\n\r\nconst PanelTask: React.FunctionComponent<PanelTaskProps> = (props: PanelTaskProps) => {\r\n    const { title, tasks, onChange, readOnly } = props;\r\n    \r\n    const [selectedTask, setSelectedTask] = React.useState<Task>({\r\n        title: '',\r\n        description: '',\r\n        status: ''\r\n    });\r\n    const [openDialog, setOpenDialog] = React.useState<boolean>(false);\r\n\r\n    const template = (options: any) => {\r\n        const className = `${options.className} p-jc-start`;\r\n        const titleClassName = `${options.titleClassName} p-pl-1`;\r\n\r\n        return (\r\n            \r\n            <div className={className}>\r\n                <span className={titleClassName}>\r\n                    {title}\r\n                </span>\r\n                {!readOnly &&\r\n                <Button label='Add task' id='addTask' icon='pi pi-plus' onClick={onClickAdd} />\r\n                }                \r\n            </div>\r\n        )\r\n    }\r\n\r\n    const template2 = (options: any, title: string, index: number) => {\r\n        const className = `${options.className} p-jc-start p-p-2`;\r\n        const titleClassName = `${options.titleClassName} p-pl-1`;\r\n\r\n        return (\r\n            <div className={className}>\r\n                <span className={titleClassName}>\r\n                    {title}\r\n                </span>\r\n                <Button className='p-button-rounded p-button-text' icon='pi pi-ellipsis-v' onClick={() => onEdit(index)} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const onClickAdd = () => {\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const onEdit = (index: number) => {\r\n        setSelectedTask(tasks[index]);\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const onAdd = (task: Task) => {    \r\n        onChange(task);\r\n        setSelectedTask({} as Task);\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <DialogTask title={selectedTask.id ? 'Edit Task' : 'Add Task'} task={selectedTask} onSave={(task: Task) => onAdd(task)} onClose={() => { setOpenDialog(false); setSelectedTask({} as Task) }} open={openDialog} />\r\n            <Panel headerTemplate={template} className='p-shadow-1 m-mt-1'>\r\n                {tasks.map((t: Task, i) => {\r\n                    return (\r\n                        <Panel headerTemplate={(o: any) => template2(o, t.title || '', i)} key={i} header={t.title} className='p-mb-1'>{t.description}</Panel>\r\n                    )\r\n                })}\r\n            </Panel>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PanelTask;","import React from 'react';\r\nimport 'primeflex/primeflex.css';\r\nimport 'primeicons/primeicons.css';\r\nimport 'primereact/resources/primereact.css';\r\nimport '../../index.css';\r\nimport PanelTask from '../Panel/PanelTask';\r\nimport { Task } from '../../interfaces';\r\n\r\ninterface TasksProps {    \r\n    // tasks?: Task[]\r\n}\r\n\r\nconst Tasks: React.FunctionComponent<TasksProps> = (props: TasksProps) => {\r\n    // const { tasks } = props;\r\n\r\n    const [tasks, setTasks] = React.useState<Task[]>([] as Task[]);\r\n\r\n     const onChange = (task: Task) => {\r\n         debugger\r\n        let update = [] as Task[];\r\n        if (task.id) {\r\n            update = [...tasks];\r\n            update[update.findIndex((t: Task) => t.id === task.id)] = task;\r\n        } else {\r\n            task.id = tasks.length === 0 ? 1 : tasks.length;\r\n            update = [...tasks, task];\r\n        }\r\n\r\n        setTasks(update);\r\n     }\r\n\r\n    return (\r\n\r\n        <div className='p-grid'>\r\n            <div className=\"p-col-12 p-lg-2\">\r\n                <PanelTask title='To Do' onChange={onChange} tasks={tasks.filter((t: Task) => t.status === 'TD')} />\r\n            </div>\r\n            <div className=\"p-col-12 p-lg-2\">\r\n                <PanelTask readOnly title='Done' onChange={onChange} tasks={tasks.filter((t: Task) => t.status === 'D')} />\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Tasks;","\n// import logo from './logo.svg';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\nimport './App.css';\nimport './index.css';\nimport React from 'react';\nimport Tasks from './components/Tasks/Tasks';\n\n\n\nfunction App() {\n  return (\n    <div className=\"p-p-6\">\n      <Tasks />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}