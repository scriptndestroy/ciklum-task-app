{"version":3,"sources":["redux/ui/ui.action.tsx","config.ts","config.pro.ts","redux/ui/ui.reducer.tsx","redux/reducers.tsx","redux/store.tsx","services/index.tsx","services/tasks/tasks.service.tsx","services/api.services.tsx","components/Form/FormTask.tsx","components/Dialog/DialogTask.tsx","components/Panel/PanelTask.tsx","components/Tasks/Tasks.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypes","config","ciklum_api","DEV","VERSION","UIActions","type","LOADING","payload","LOADING_CLEAR","initialState","showLoading","combineReducers","uiReducer","state","action","store","createStore","reducers","applyMiddleware","thunk","tasksService","URL","a","this","onInit","axios","get","then","result","onFinish","catch","error","onFinishError","dispatch","setLoading","noLoading","clearLoading","data","post","put","FormTask","forwardRef","props","ref","onSave","task","React","useState","formTask","setFormTask","taskStatus","setTaskStatus","useEffect","getTaskStatus","response","formik","useFormik","initialValues","title","description","status","validate","errors","onSubmit","console","log","isFormFieldValid","name","touched","getFormErrorMessage","className","style","marginTop","id","e","preventDefault","handleSubmit","validateForm","r","value","maxLength","onChange","currentTarget","autoFocus","classNames","htmlFor","options","DialogTask","open","onClose","formTaskRef","useRef","draggable","dismissableMask","footer","label","icon","onClick","form","header","onHide","position","width","visible","PanelTask","tasks","readOnly","selectedTask","setSelectedTask","openDialog","setOpenDialog","onClickAdd","onEdit","index","Fragment","onAdd","headerTemplate","titleClassName","map","t","i","o","paddingLeft","paddingRight","template2","Tasks","setTasks","getAllTasks","getAll","update","updateTask","create","addTask","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c2a0146b.chunk.js","sourcesContent":["\r\nexport enum ActionTypes { \r\n  LOADING = \"LOADING\",\r\n  LOADING_CLEAR = \"LOADING_CLEAR\",\r\n}\r\n\r\ninterface LoadingAction {\r\n  type: ActionTypes.LOADING;\r\n}\r\ninterface LoadingClearAction {\r\n  type: ActionTypes.LOADING_CLEAR;\r\n}\r\n\r\n\r\nexport type Actions = LoadingAction | LoadingClearAction;\r\n\r\nconst loading = () => {\r\n  return { type: ActionTypes.LOADING, payload: \"\" };\r\n};\r\n\r\nconst loadingClear = () => {\r\n  return { type: ActionTypes.LOADING_CLEAR, payload: \"\" };\r\n};\r\n\r\n\r\nexport const UIActions = { \r\n  loading,\r\n  loadingClear \r\n};\r\n","import loc from './config.loc'; \r\nimport dev from './config.dev';\r\nimport prod from './config.pro'; \r\n\r\nconst config = process.env.NODE_ENV === 'production' ? prod : (process.env.NODE_ENV === 'development' ? dev : loc);\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    ...config,  \r\n    VERSION:\"v 0.190621\" // mm/dd/hh\r\n};\r\n","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    // ciklum_api:\"https://localhost:5001/\",\r\n    ciklum_api:\"https://localhost:44311/\",\r\n    DEV:false\r\n};","import { Actions, ActionTypes } from \"./ui.action\";\r\n\r\nexport interface UIState {   \r\n    showLoading: boolean;    \r\n}\r\n\r\nconst initialState = {    \r\n    showLoading: false, \r\n}\r\n\r\nexport const uiReducer = (state: UIState = initialState, action: Actions) => {\r\n    switch (action.type) {      \r\n        case ActionTypes.LOADING:\r\n            return {\r\n                ...state,\r\n                showLoading: true,\r\n            };\r\n        case ActionTypes.LOADING_CLEAR:\r\n            return {\r\n                ...state,\r\n                showLoading: false,\r\n            };      \r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { uiReducer } from \"./ui/ui.reducer\";\r\n\r\nexport default combineReducers({\r\n    uiReducer\r\n})","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from './reducers';\r\n\r\nexport const store = createStore(reducers,applyMiddleware(thunk))\r\n\r\n","import TasksService from './tasks/tasks.service';\r\n\r\nexport const tasksService = new TasksService();","import axios from \"axios\";\r\nimport config from \"../../config\";\r\nimport { Task } from \"../../interfaces/Task\";\r\nimport ApiServices from \"../api.services\";\r\n\r\nexport default class TasksService extends ApiServices<Task> {\r\n  URL: string;\r\n  constructor() {\r\n    super();\r\n    this.URL = config.ciklum_api + \"Tasks\";\r\n  }\r\n\r\n  async getTaskStatus() {\r\n    this.onInit();\r\n    return axios\r\n      .get<any[]>(this.URL + '/taskStatus')\r\n      .then((result) => {\r\n        return this.onFinish(result);\r\n      })\r\n      .catch((error) => {\r\n        return this.onFinishError(error);\r\n      });\r\n  }\r\n}\r\n","import axios from \"axios\";\r\nimport { store } from \"../redux/store\";\r\nimport { UIActions } from \"../redux/ui/ui.action\";\r\nimport config from \"../config\";\r\n\r\nexport default class ApiServices<T> {\r\n  URL: string;\r\n\r\n  constructor() {\r\n    this.URL = config.ciklum_api;\r\n  }\r\n\r\n  setLoading() {\r\n    store.dispatch(UIActions.loading());\r\n  }\r\n\r\n  clearLoading() {\r\n    store.dispatch(UIActions.loadingClear());\r\n  }\r\n\r\n  onInit() {\r\n    this.setLoading();\r\n  }\r\n\r\n  onFinish(result: any, noLoading?: boolean) {\r\n    if (!noLoading) {\r\n      this.clearLoading();\r\n    }\r\n    return result.data;\r\n  }\r\n\r\n  onFinishError(error: any, noLoading?: boolean) {\r\n    if (!noLoading) {\r\n      this.clearLoading();\r\n    }\r\n    //store.dispatch(UIActions.alertError(error));\r\n    throw error;\r\n  }\r\n\r\n  async getAll() {\r\n    this.onInit();\r\n    return axios\r\n      .get<T[]>(this.URL)\r\n      .then((result) => {\r\n        return this.onFinish(result);\r\n      })\r\n      .catch((error) => {\r\n        return this.onFinishError(error);\r\n      });\r\n  }\r\n\r\n  async create(data: any) {      \r\n    this.onInit();\r\n    return axios\r\n      .post<T>(`${this.URL}`, data)\r\n      .then((result) => {\r\n        return this.onFinish(result);\r\n      })\r\n      .catch((error) => {\r\n        return this.onFinishError(error);\r\n      });\r\n  }\r\n\r\n  async update(data: any) {\r\n    this.onInit();\r\n    return axios\r\n      .put<T>(`${this.URL}`, data)\r\n      .then((result) => {\r\n        return this.onFinish(result);\r\n      })\r\n      .catch((error) => {\r\n        return this.onFinishError(error);\r\n      });\r\n  }\r\n}\r\n","import { useFormik } from \"formik\";\r\nimport { Dropdown } from \"primereact/dropdown\";\r\nimport { InputText } from \"primereact/inputtext\";\r\nimport { classNames } from \"primereact/utils\";\r\nimport React, { forwardRef, Ref, SyntheticEvent, useEffect } from \"react\";\r\nimport \"../../index.css\";\r\nimport { Task } from \"../../interfaces/index\";\r\nimport { tasksService } from \"../../services\";\r\n\r\nexport interface RefObjectFormTask {\r\n  onSubmit: () => void;\r\n}\r\n\r\ninterface FormTaskProps {\r\n  ref?: ((instance: unknown) => void) | React.MutableRefObject<unknown> | null;\r\n  onSave: (task: Task) => void;\r\n  task?: Task;\r\n}\r\n\r\nconst FormTask = forwardRef(\r\n  (props: FormTaskProps, ref: Ref<RefObjectFormTask>) => {    \r\n    const { onSave, task } = props;\r\n\r\n    const [formTask, setFormTask] = React.useState<Task>(task || ({} as Task));\r\n    const [taskStatus, setTaskStatus] = React.useState<any[]>([]);\r\n\r\n    useEffect(() => {\r\n        tasksService.getTaskStatus()\r\n        .then((response: any[]) => {\r\n            setTaskStatus(response);\r\n        })\r\n    }, []);\r\n\r\n    const formik = useFormik({\r\n      initialValues: {\r\n        title: task?.title ? task.title : \"\",\r\n        description: task?.description ? task.description : \"\",\r\n        status: task?.status ? task.status : \"\",\r\n      },\r\n\r\n      validate: (data: Task) => {\r\n        let errors = {\r\n          title: \"\",\r\n          description: \"\",\r\n          status: \"\",\r\n        };\r\n\r\n        if (!data.title) {\r\n          errors.title = \"Title is required.\";\r\n        }\r\n\r\n        if (!data.description) {\r\n          errors.description = \"Description is required.\";\r\n        }\r\n\r\n        if (!data.status) {\r\n          errors.status = \"Status is required.\";\r\n        }\r\n\r\n        return errors;\r\n      },\r\n\r\n      onSubmit: (data) => {\r\n        onSave(data);\r\n        console.log(\"aaa\");\r\n      },\r\n    });\r\n\r\n    const handleSubmit = (e: SyntheticEvent) => {\r\n      e.preventDefault();\r\n      formik.handleSubmit();\r\n      formik.validateForm(formTask).then((r) => {\r\n        if (!r.title && !r.description) {\r\n          onSave(formTask);\r\n        }\r\n      });\r\n      return false;\r\n    };\r\n\r\n    const isFormFieldValid = (name: string) =>\r\n      !!(\r\n        formik.touched[name as keyof Task] && formik.errors[name as keyof Task]\r\n      );\r\n    const getFormErrorMessage = (name: string) => {\r\n      return (\r\n        isFormFieldValid(name) && (\r\n          <small className=\"p-error\">{formik.errors[name as keyof Task]}</small>\r\n        )\r\n      );\r\n    };    \r\n\r\n    return (\r\n      <div className=\"form-demo\" style={{ marginTop: \"2rem\" }}>\r\n        <div className=\"\">\r\n          <form\r\n            id=\"form-task\"\r\n            className=\"p-fluid\"\r\n            onSubmit={(e) => handleSubmit(e)}\r\n          >\r\n            <div className=\"p-field\">\r\n              <span className=\"p-float-label\">\r\n                <InputText\r\n                  id=\"title\"\r\n                  name=\"title\"\r\n                  value={formTask.title}\r\n                  maxLength={100}\r\n                  onChange={(e) =>\r\n                    setFormTask({ ...formTask, title: e.currentTarget.value })\r\n                  }\r\n                  autoFocus\r\n                  className={classNames({\r\n                    \"p-invalid\": isFormFieldValid(\"title\"),\r\n                  })}\r\n                />\r\n                <label\r\n                  htmlFor=\"title\"\r\n                  className={classNames({\r\n                    \"p-error\": isFormFieldValid(\"title\"),\r\n                  })}\r\n                >\r\n                  Title*\r\n                </label>\r\n              </span>\r\n              {getFormErrorMessage(\"title\")}\r\n            </div>\r\n            <div className=\"p-field p-mt-6\">\r\n              <span className=\"p-float-label\">\r\n                <InputText\r\n                  id=\"description\"\r\n                  name=\"description\"\r\n                  value={formTask.description}\r\n                  maxLength={300}\r\n                  onChange={(e) =>\r\n                    setFormTask({\r\n                      ...formTask,\r\n                      description: e.currentTarget.value,\r\n                    })\r\n                  }\r\n                  className={classNames({\r\n                    \"p-invalid\": isFormFieldValid(\"description\"),\r\n                  })}\r\n                />\r\n                <label\r\n                  htmlFor=\"description\"\r\n                  className={classNames({\r\n                    \"p-error\": isFormFieldValid(\"description\"),\r\n                  })}\r\n                >\r\n                  Description*\r\n                </label>\r\n              </span>\r\n              {getFormErrorMessage(\"description\")}\r\n            </div>\r\n            <div className=\"p-field p-mt-6\">\r\n              <span className=\"p-float-label\">\r\n                <Dropdown\r\n                  id=\"status\"\r\n                  name=\"status\"                  \r\n                  options={taskStatus}\r\n                  value={formTask.status}\r\n                  onChange={(e) =>                  \r\n                    setFormTask({ ...formTask, status: e.value })\r\n                  }\r\n                  className={classNames({\r\n                    \"p-invalid\": isFormFieldValid(\"status\"),\r\n                  })}\r\n                />\r\n                <label\r\n                  htmlFor=\"status\"\r\n                  className={classNames({\r\n                    \"p-error\": isFormFieldValid(\"status\"),\r\n                  })}\r\n                >\r\n                  Status*\r\n                </label>\r\n              </span>\r\n              {getFormErrorMessage(\"status\")}\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default FormTask;\r\n","import 'primeflex/primeflex.css';\r\nimport 'primeicons/primeicons.css';\r\nimport { Button } from 'primereact/button';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport 'primereact/resources/primereact.css';\r\nimport React, { useRef } from 'react';\r\nimport '../../index.css';\r\nimport { Task } from '../../interfaces';\r\nimport FormTask, { RefObjectFormTask } from '../Form/FormTask'\r\n// import './DialogDemo.css';\r\n\r\n\r\ninterface DialogTaskProps {\r\n    onSave: (task: Task) => void;\r\n    onClose: () => void;\r\n    open: boolean;\r\n    title: string;\r\n    task?: Task;\r\n}\r\n\r\nconst DialogTask: React.FunctionComponent<DialogTaskProps> = (props: DialogTaskProps) => {\r\n    const { open, title, task, onSave, onClose } = props;\r\n\r\n    const formTaskRef = useRef<RefObjectFormTask>(null);\r\n\r\n    const renderFooter = (name: string) => {\r\n        return (\r\n            <div>\r\n                <Button label=\"No\" icon=\"pi pi-times\" onClick={onClose} className=\"p-button-text\" />\r\n                <Button label=\"Yes\" icon=\"pi pi-check\" type='submit' form='form-task' autoFocus />\r\n            </div>\r\n        );\r\n    }\r\n\r\n \r\n    return (\r\n        <Dialog\r\n            draggable={false}\r\n            dismissableMask\r\n            footer={renderFooter('displayBasic')}\r\n            header={title}            \r\n            onHide={onClose}\r\n            position='top'\r\n            style={{ width: '30rem', marginTop: '5rem' }}\r\n            visible={open}\r\n        >\r\n            <FormTask  ref={formTaskRef} task={task} onSave={(task: Task) => onSave(task)} />\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default DialogTask;","import 'primeflex/primeflex.css';\r\nimport 'primeicons/primeicons.css';\r\nimport { Button } from 'primereact/button';\r\nimport { Panel } from 'primereact/panel';\r\nimport 'primereact/resources/primereact.css';\r\nimport React from 'react';\r\nimport DialogTask from '../Dialog/DialogTask';\r\nimport '../../index.css';\r\nimport { Task } from '../../interfaces';\r\n\r\ninterface PanelTaskProps {\r\n    tasks: Task[];\r\n    title?: string;\r\n    onChange: (t: Task) => void;\r\n    readOnly?: boolean;\r\n}\r\n\r\nconst PanelTask: React.FunctionComponent<PanelTaskProps> = (props: PanelTaskProps) => {\r\n    const { title, tasks, onChange, readOnly } = props;\r\n    \r\n    const [selectedTask, setSelectedTask] = React.useState<Task>({\r\n        title: '',\r\n        description: '',\r\n        status: ''\r\n    });\r\n    const [openDialog, setOpenDialog] = React.useState<boolean>(false);\r\n\r\n    const template = (options: any) => {\r\n        const className = `${options.className} p-jc-start`;\r\n        const titleClassName = `${options.titleClassName} p-pl-1`;\r\n\r\n        return (\r\n            \r\n            <div className={className}>\r\n                <span className={titleClassName}>\r\n                    {title}\r\n                </span>\r\n                {!readOnly &&\r\n                <Button label='Add task' id='addTask' icon='pi pi-plus' onClick={onClickAdd} />\r\n                }                \r\n            </div>\r\n        )\r\n    }\r\n\r\n    const template2 = (options: any, title: string, index: number) => {\r\n        const className = `${options.className} p-jc-start p-p-2`;\r\n        const titleClassName = `${options.titleClassName} p-pl-1`;\r\n\r\n        return (\r\n            <div className={className}>\r\n                <span className={titleClassName}>\r\n                    {title}\r\n                </span>\r\n                <Button className='p-button-rounded p-button-text' style={{ paddingLeft: '17px', paddingRight: '17px'}} icon='pi pi-ellipsis-v' onClick={() => onEdit(index)} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const onClickAdd = () => {\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const onEdit = (index: number) => {\r\n        setSelectedTask(tasks[index]);\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const onAdd = (task: Task) => {    \r\n        onChange(task);\r\n        setSelectedTask({} as Task);\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <DialogTask title={selectedTask.id ? 'Edit Task' : 'Add Task'} task={selectedTask} onSave={(task: Task) => onAdd(task)} onClose={() => { setOpenDialog(false); setSelectedTask({} as Task) }} open={openDialog} />\r\n            <Panel headerTemplate={template} className='p-shadow-1 m-mt-1'>\r\n                {tasks.map((t: Task, i) => {\r\n                    return (\r\n                        <Panel headerTemplate={(o: any) => template2(o, t.title || '', i)} key={i} header={t.title} className='p-mb-1'>{t.description}</Panel>\r\n                    )\r\n                })}\r\n            </Panel>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PanelTask;","import React, { useEffect } from \"react\";\r\nimport \"primeflex/primeflex.css\";\r\nimport \"primeicons/primeicons.css\";\r\nimport \"primereact/resources/primereact.css\";\r\nimport \"../../index.css\";\r\nimport PanelTask from \"../Panel/PanelTask\";\r\nimport { Task } from \"../../interfaces\";\r\nimport { tasksService } from \"../../services\";\r\n\r\ninterface TasksProps {\r\n  // tasks?: Task[]\r\n}\r\n\r\nconst Tasks: React.FunctionComponent<TasksProps> = (props: TasksProps) => {\r\n  // const { tasks } = props;\r\n\r\n  const [tasks, setTasks] = React.useState<Task[]>([] as Task[]);\r\n\r\n  useEffect(() => {      \r\n    getAllTasks();\r\n  }, []);\r\n\r\n  const getAllTasks = () => {\r\n    tasksService.getAll().then((response: Task[]) => {\r\n      setTasks(response);\r\n    });\r\n  };\r\n\r\n  const addTask = (task: Task) => {\r\n    tasksService\r\n      .create(task)\r\n      .then((response: Task[]) => {\r\n        setTasks(response);\r\n      })\r\n      .catch((e: any) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n\r\n  const updateTask = (task: Task) => {\r\n    tasksService\r\n      .update(task)\r\n      .then((response: Task[]) => {\r\n        setTasks(response);\r\n      })\r\n      .catch((e: any) => {\r\n        console.error(e);\r\n      });\r\n  };\r\n\r\n  const onChange = (task: Task) => {\r\n      debugger\r\n    if (task.id) {\r\n      updateTask(task);\r\n    } else {\r\n      addTask(task);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-grid\">\r\n      <div className=\"p-col-12 p-lg-2\">\r\n        <PanelTask\r\n          title=\"To Do\"\r\n          onChange={onChange}\r\n          tasks={tasks.filter((t: Task) => t.status === \"TD\")}\r\n        />\r\n      </div>\r\n      <div className=\"p-col-12 p-lg-2\">\r\n        <PanelTask\r\n          readOnly\r\n          title=\"Done\"\r\n          onChange={onChange}\r\n          tasks={tasks.filter((t: Task) => t.status === \"D\")}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","\n// import logo from './logo.svg';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\nimport './App.css';\nimport './index.css';\nimport React from 'react';\nimport Tasks from './components/Tasks/Tasks';\n\n\n\nfunction App() {\n  return (\n    <div className=\"p-p-6\">\n      <Tasks />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}