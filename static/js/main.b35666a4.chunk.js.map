{"version":3,"sources":["components/Form/FormTask.tsx","components/Dialog/DialogTask.tsx","components/Panel/PanelTask.tsx","components/Tasks/Tasks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FormTask","forwardRef","props","ref","onSave","task","React","useState","formTask","setFormTask","formik","useFormik","initialValues","title","description","validate","data","errors","onSubmit","console","log","isFormFieldValid","name","touched","getFormErrorMessage","className","style","marginTop","id","e","preventDefault","handleSubmit","validateForm","then","r","value","onChange","currentTarget","autoFocus","classNames","htmlFor","DialogTask","open","onClose","formTaskRef","useRef","draggable","dismissableMask","footer","label","icon","onClick","type","form","header","onHide","position","width","visible","PanelTask","tasks","setTasks","selectedTask","setSelectedTask","openDialog","setOpenDialog","onClickAdd","onEdit","index","Fragment","update","length","onAdd","headerTemplate","options","titleClassName","map","t","i","o","template2","Tasks","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSA+FeA,EA9EEC,sBAAW,SAACC,EAAsBC,GAC/C,IAAQC,EAAiBF,EAAjBE,OAAQC,EAASH,EAATG,KAEhB,EAAgCC,IAAMC,SAAeF,GAAQ,IAA7D,mBAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAASC,YAAU,CACrBC,cAAe,CACXC,OAAW,OAAJR,QAAI,IAAJA,OAAA,EAAAA,EAAMQ,OAAQR,EAAKQ,MAAQ,GAClCC,aAAiB,OAAJT,QAAI,IAAJA,OAAA,EAAAA,EAAMS,aAAcT,EAAKS,YAAc,IAGxDC,SAAU,SAACC,GACP,IAAIC,EAAS,CACTJ,MAAO,GACPC,YAAa,IAWjB,OARKE,EAAKH,QACNI,EAAOJ,MAAQ,sBAGdG,EAAKF,cACNG,EAAOH,YAAc,4BAGlBG,GAGXC,SAAU,SAACF,GACPZ,EAAOY,GACPG,QAAQC,IAAI,UAiBdC,EAAmB,SAACC,GAAD,SAAqBZ,EAAOa,QAAQD,KAAuBZ,EAAOO,OAAOK,KAC5FE,EAAsB,SAACF,GACzB,OAAOD,EAAiBC,IAAS,uBAAOG,UAAU,UAAjB,SAA4Bf,EAAOO,OAAOK,MAK/E,OACI,qBAAKG,UAAU,YAAYC,MAAO,CAAEC,UAAW,QAA/C,SACI,qBAAKF,UAAU,GAAf,SACI,uBAAMG,GAAG,YAAYH,UAAU,UAAUP,SAAU,SAACW,GAAD,OAtB1C,SAACA,GAQlB,OAPAA,EAAEC,iBACFpB,EAAOqB,eACPrB,EAAOsB,aAAaxB,GAAUyB,MAAK,SAACC,GAC3BA,EAAErB,OAAUqB,EAAEpB,aACfV,EAAOI,OAGR,EAc2DuB,CAAaF,IAAvE,UACI,sBAAKJ,UAAU,UAAf,UACI,uBAAMA,UAAU,gBAAhB,UACI,cAAC,YAAD,CAAWG,GAAG,QAAQN,KAAK,QAAQa,MAAO3B,EAASK,MAAOuB,SAAU,SAACP,GAAD,OAAOpB,EAAY,2BAAID,GAAL,IAAeK,MAAOgB,EAAEQ,cAAcF,UAASG,WAAS,EAACb,UAAWc,qBAAW,CAAE,YAAalB,EAAiB,aACrM,uBAAOmB,QAAQ,QAAQf,UAAWc,qBAAW,CAAE,UAAWlB,EAAiB,WAA3E,uBAEHG,EAAoB,YAEzB,sBAAKC,UAAU,iBAAf,UACI,uBAAMA,UAAU,gBAAhB,UACI,cAAC,YAAD,CAAWG,GAAG,cAAcN,KAAK,cAAca,MAAO3B,EAASM,YAAasB,SAAU,SAACP,GAAD,OAAOpB,EAAY,2BAAID,GAAL,IAAeM,YAAae,EAAEQ,cAAcF,UAASG,WAAS,EAACb,UAAWc,qBAAW,CAAE,YAAalB,EAAiB,mBAC7N,uBAAOmB,QAAQ,cAAcf,UAAWc,qBAAW,CAAE,UAAWlB,EAAiB,iBAAjF,6BAEHG,EAAoB,4BCpC9BiB,EA/B8C,SAACvC,GAC1D,IAAQwC,EAAuCxC,EAAvCwC,KAAM7B,EAAiCX,EAAjCW,MAAOR,EAA0BH,EAA1BG,KAAMD,EAAoBF,EAApBE,OAAQuC,EAAYzC,EAAZyC,QAE7BC,EAAcC,iBAA0B,MAY9C,OACI,cAAC,SAAD,CACIC,WAAW,EACXC,iBAAe,EACfC,OAZA,gCACI,cAAC,SAAD,CAAQC,MAAM,KAAKC,KAAK,cAAcC,QAASR,EAASlB,UAAU,kBAClE,cAAC,SAAD,CAAQwB,MAAM,MAAMC,KAAK,cAAcE,KAAK,SAASC,KAAK,YAAYf,WAAS,OAWnFgB,OAAQzC,EACR0C,OAAQZ,EACRa,SAAS,MACT9B,MAAO,CAAE+B,MAAO,QAAS9B,UAAW,QACpC+B,QAAShB,EARb,SAUI,cAAC,EAAD,CAAWvC,IAAKyC,EAAavC,KAAMA,EAAMD,OAAQ,SAACC,GAAD,OAAgBD,EAAOC,SC6CrEsD,EA3E4C,SAACzD,GACxD,IAAQW,EAAUX,EAAVW,MAER,EAA0BP,IAAMC,SAAiB,IAAjD,mBAAOqD,EAAP,KAAcC,EAAd,KACA,EAAwCvD,IAAMC,SAAe,CACzDM,MAAO,GACPC,YAAa,KAFjB,mBAAOgD,EAAP,KAAqBC,EAArB,KAIA,EAAoCzD,IAAMC,UAAkB,GAA5D,mBAAOyD,EAAP,KAAmBC,EAAnB,KA8BMC,EAAa,WACfD,GAAc,IAGZE,EAAS,SAACC,GACZL,EAAgBH,EAAMQ,IACtBH,GAAc,IAiBlB,OACI,eAAC,IAAMI,SAAP,WACI,cAAC,EAAD,CAAYxD,MAAM,WAAWR,KAAMyD,EAAc1D,OAAQ,SAACC,GAAD,OAhBnD,SAACA,GACX,IAAIiE,EAAS,GACTjE,EAAKuB,IAAkB,IAAZvB,EAAKuB,IAChB0C,EAAM,YAAOV,IACNvD,EAAKuB,IAAMvB,GAElBA,EAAKuB,GAAKgC,EAAMW,OAChBD,EAAM,sBAAOV,GAAP,CAAcvD,KAExBwD,EAASS,GACTP,EAAgB,IAChBE,GAAc,GAK+DO,CAAMnE,IAAOsC,QAAS,WAAQsB,GAAc,GAAQF,EAAgB,KAAerB,KAAMsB,IAClK,cAAC,QAAD,CAAOS,eAtDE,SAACC,GACd,IAAMjD,EAAS,UAAMiD,EAAQjD,UAAd,eACTkD,EAAc,UAAMD,EAAQC,eAAd,WAEpB,OACI,sBAAKlD,UAAWA,EAAhB,UACI,sBAAMA,UAAWkD,EAAjB,SACK9D,IAEL,cAAC,SAAD,CAAQoC,MAAM,WAAWrB,GAAG,UAAUsB,KAAK,aAAaC,QAASe,QA6CpCzC,UAAU,oBAA3C,SACKmC,EAAMgB,KAAI,SAACC,EAASC,GACjB,OACI,cAAC,QAAD,CAAOL,eAAgB,SAACM,GAAD,OA3CzB,SAACL,EAAc7D,EAAeuD,GAC5C,IAAM3C,EAAS,UAAMiD,EAAQjD,UAAd,qBACTkD,EAAc,UAAMD,EAAQC,eAAd,WAEpB,OACI,sBAAKlD,UAAWA,EAAhB,UACI,sBAAMA,UAAWkD,EAAjB,SACK9D,IAEL,cAAC,SAAD,CAAQY,UAAU,iCAAiCyB,KAAK,mBAAmBC,QAAS,kBAAMgB,EAAOC,SAkCtDY,CAAUD,EAAGF,EAAEhE,OAAS,GAAIiE,IAAYxB,OAAQuB,EAAEhE,MAAOY,UAAU,SAAtG,SAAgHoD,EAAE/D,aAA1CgE,YCvDjFG,EAlBoC,SAAC/E,GAGhD,OAEI,sBAAKuB,UAAU,SAAf,UACI,qBAAKA,UAAU,iBAAf,SACI,cAAC,EAAD,CAAWZ,MAAM,YAErB,qBAAKY,UAAU,iBAAf,SACI,cAAC,EAAD,CAAWZ,MAAM,sBCClBqE,MARf,WACE,OACE,qBAAKzD,UAAU,QAAf,SACE,cAAC,EAAD,OCFS0D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBpD,MAAK,YAAkD,IAA/CqD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.b35666a4.chunk.js","sourcesContent":["import { useFormik } from 'formik';\r\nimport { InputText } from 'primereact/inputtext';\r\nimport { classNames } from 'primereact/utils';\r\nimport React, { forwardRef, Ref, SyntheticEvent } from 'react';\r\nimport '../../index.css';\r\nimport { Task } from '../../interfaces/index';\r\n\r\nexport interface RefObjectFormTask {\r\n    onSubmit: () => void;    \r\n}\r\n\r\ninterface FormTaskProps {\r\n    ref?: ((instance: unknown) => void) | React.MutableRefObject<unknown> | null;\r\n    onSave: (task: Task) => void;\r\n    task?: Task;\r\n}\r\n\r\nconst FormTask = forwardRef((props: FormTaskProps, ref: Ref<RefObjectFormTask>) => {\r\n    const { onSave, task } = props;\r\n\r\n    const [formTask, setFormTask] = React.useState<Task>(task || {} as Task);\r\n    \r\n    const formik = useFormik({                \r\n        initialValues: {\r\n            title: task?.title ? task.title : '',\r\n            description: task?.description ? task.description : '',            \r\n        },\r\n        \r\n        validate: (data: Task) => {\r\n            let errors = {\r\n                title: '',\r\n                description: ''\r\n            };\r\n\r\n            if (!data.title) {\r\n                errors.title = 'Title is required.';\r\n            }\r\n\r\n            if (!data.description) {\r\n                errors.description = 'Description is required.';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        \r\n        onSubmit: (data) =>{\r\n            onSave(data);\r\n            console.log('aaa')\r\n        },        \r\n\r\n    });\r\n    \r\n    const handleSubmit = (e: SyntheticEvent) => {        \r\n        e.preventDefault();\r\n        formik.handleSubmit();\r\n        formik.validateForm(formTask).then((r) =>{\r\n            if (!r.title && !r.description) {\r\n                onSave(formTask)   \r\n            }\r\n        })\r\n        return false;\r\n    }\r\n\r\n\r\n    const isFormFieldValid = (name: string) => !!(formik.touched[name as keyof Task] && formik.errors[name as keyof Task]);\r\n    const getFormErrorMessage = (name: string) => {\r\n        return isFormFieldValid(name) && <small className=\"p-error\">{formik.errors[name as keyof Task]}</small>;\r\n    };\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"form-demo\" style={{ marginTop: '2rem' }}>\r\n            <div className=\"\">\r\n                <form id='form-task' className=\"p-fluid\" onSubmit={(e) => handleSubmit(e)}>\r\n                    <div className=\"p-field\">\r\n                        <span className=\"p-float-label\">\r\n                            <InputText id=\"title\" name=\"title\" value={formTask.title} onChange={(e) => setFormTask({...formTask, title: e.currentTarget.value})} autoFocus className={classNames({ 'p-invalid': isFormFieldValid('title') })} />\r\n                            <label htmlFor=\"title\" className={classNames({ 'p-error': isFormFieldValid('title') })}>Title*</label>\r\n                        </span>\r\n                        {getFormErrorMessage('title')}\r\n                    </div>\r\n                    <div className=\"p-field p-mt-6\">\r\n                        <span className=\"p-float-label\">\r\n                            <InputText id=\"description\" name=\"description\" value={formTask.description} onChange={(e) => setFormTask({...formTask, description: e.currentTarget.value})} autoFocus className={classNames({ 'p-invalid': isFormFieldValid('description') })} />\r\n                            <label htmlFor=\"description\" className={classNames({ 'p-error': isFormFieldValid('description') })}>Description*</label>\r\n                        </span>\r\n                        {getFormErrorMessage('description')}\r\n                    </div>                    \r\n                </form>                \r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default FormTask;","import 'primeflex/primeflex.css';\r\nimport 'primeicons/primeicons.css';\r\nimport { Button } from 'primereact/button';\r\nimport { Dialog } from 'primereact/dialog';\r\nimport 'primereact/resources/primereact.css';\r\nimport React, { useRef } from 'react';\r\nimport '../../index.css';\r\nimport { Task } from '../../interfaces';\r\nimport FormTask, { RefObjectFormTask } from '../Form/FormTask'\r\n// import './DialogDemo.css';\r\n\r\n\r\ninterface DialogTaskProps {\r\n    onSave: (task: Task) => void;\r\n    onClose: () => void;\r\n    open: boolean;\r\n    title: string;\r\n    task?: Task;\r\n}\r\n\r\nconst DialogTask: React.FunctionComponent<DialogTaskProps> = (props: DialogTaskProps) => {\r\n    const { open, title, task, onSave, onClose } = props;\r\n\r\n    const formTaskRef = useRef<RefObjectFormTask>(null);\r\n\r\n    const renderFooter = (name: string) => {\r\n        return (\r\n            <div>\r\n                <Button label=\"No\" icon=\"pi pi-times\" onClick={onClose} className=\"p-button-text\" />\r\n                <Button label=\"Yes\" icon=\"pi pi-check\" type='submit' form='form-task' autoFocus />\r\n            </div>\r\n        );\r\n    }\r\n\r\n \r\n    return (\r\n        <Dialog\r\n            draggable={false}\r\n            dismissableMask\r\n            footer={renderFooter('displayBasic')}\r\n            header={title}            \r\n            onHide={onClose}\r\n            position='top'\r\n            style={{ width: '30rem', marginTop: '5rem' }}\r\n            visible={open}\r\n        >\r\n            <FormTask  ref={formTaskRef} task={task} onSave={(task: Task) => onSave(task)} />\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default DialogTask;","import 'primeflex/primeflex.css';\r\nimport 'primeicons/primeicons.css';\r\nimport { Button } from 'primereact/button';\r\nimport { Panel } from 'primereact/panel';\r\n// import {Task} from '../../interfaces'\r\nimport 'primereact/resources/primereact.css';\r\nimport React from 'react';\r\nimport DialogTask from '../Dialog/DialogTask';\r\nimport '../../index.css';\r\nimport { Task } from '../../interfaces';\r\n\r\ninterface PanelTaskProps {\r\n    tasks?: any[];\r\n    title?: string;\r\n}\r\n\r\nconst PanelTask: React.FunctionComponent<PanelTaskProps> = (props: PanelTaskProps) => {\r\n    const { title } = props;\r\n\r\n    const [tasks, setTasks] = React.useState<Task[]>([]);\r\n    const [selectedTask, setSelectedTask] = React.useState<Task>({\r\n        title: '',\r\n        description: ''\r\n    });\r\n    const [openDialog, setOpenDialog] = React.useState<boolean>(false);\r\n\r\n    const template = (options: any) => {\r\n        const className = `${options.className} p-jc-start`;\r\n        const titleClassName = `${options.titleClassName} p-pl-1`;\r\n\r\n        return (\r\n            <div className={className}>\r\n                <span className={titleClassName}>\r\n                    {title}\r\n                </span>\r\n                <Button label='Add task' id='addTask' icon='pi pi-plus' onClick={onClickAdd} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const template2 = (options: any, title: string, index: number) => {\r\n        const className = `${options.className} p-jc-start p-p-2`;\r\n        const titleClassName = `${options.titleClassName} p-pl-1`;\r\n\r\n        return (\r\n            <div className={className}>\r\n                <span className={titleClassName}>\r\n                    {title}\r\n                </span>\r\n                <Button className='p-button-rounded p-button-text' icon='pi pi-ellipsis-v' onClick={() => onEdit(index)} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const onClickAdd = () => {\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const onEdit = (index: number) => {\r\n        setSelectedTask(tasks[index]);\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const onAdd = (task: Task) => {\r\n        let update = [] as Task[];\r\n        if (task.id || task.id === 0) {\r\n            update = [...tasks];\r\n            update[task.id] = task;\r\n        } else {\r\n            task.id = tasks.length;\r\n            update = [...tasks, task];\r\n        }\r\n        setTasks(update);\r\n        setSelectedTask({} as Task);\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <DialogTask title='Add Task' task={selectedTask} onSave={(task: Task) => onAdd(task)} onClose={() => { setOpenDialog(false); setSelectedTask({} as Task) }} open={openDialog} />\r\n            <Panel headerTemplate={template} className='p-shadow-1 m-mt-1'>\r\n                {tasks.map((t: Task, i) => {\r\n                    return (\r\n                        <Panel headerTemplate={(o: any) => template2(o, t.title || '', i)} key={i} header={t.title} className='p-mb-1'>{t.description}</Panel>\r\n                    )\r\n                })}\r\n            </Panel>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default PanelTask;","import React from 'react';\r\nimport 'primeflex/primeflex.css';\r\nimport 'primeicons/primeicons.css';\r\nimport 'primereact/resources/primereact.css';\r\nimport '../../index.css';\r\nimport PanelTask from '../Panel/PanelTask';\r\ninterface TasksProps {\r\n    onChange?: () => void;\r\n}\r\n\r\nconst Tasks: React.FunctionComponent<TasksProps> = (props: TasksProps) => {\r\n    // const { onChange } = props;\r\n\r\n    return (\r\n\r\n        <div className='p-grid'>\r\n            <div className=\"p-col-6 p-lg-3\">\r\n                <PanelTask title='To Do' />\r\n            </div>\r\n            <div className=\"p-col-6 p-lg-3\">\r\n                <PanelTask title='In progress' />\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Tasks;","\n// import logo from './logo.svg';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\nimport './App.css';\nimport './index.css';\nimport React from 'react';\nimport Tasks from './components/Tasks/Tasks';\n\n\n\nfunction App() {\n  return (\n    <div className=\"p-p-6\">\n      <Tasks />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}